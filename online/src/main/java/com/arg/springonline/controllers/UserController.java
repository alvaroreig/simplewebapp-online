package com.arg.springonline.controllers;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

import com.arg.springonline.entities.User;
import com.arg.springonline.repositories.UserRepository;

@Controller
public class UserController {

	private Logger logger = LoggerFactory.getLogger(UserController.class);

	@Autowired
	// This means to get the bean called userRepository, Which is auto-generated by
	// Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@Autowired
	private DataSource dataSource;
	
    @Autowired
    JdbcTemplate jdbcTemplate;

    /**
     * 
     * Método que recupera los usuarios de la base de datos
     * usando la capa ORM de Hibernate y lo deriva a la plantilla correspondiente
     */
	@GetMapping("/users")
	public String users(ArrayList<User> users, Model model) {

		List<User> retrievedUsers = (List<User>) userRepository.findAll();
		model.addAttribute("users", retrievedUsers);
		logger.info("Retrieving " + retrievedUsers.size() + " users");
		return "user/users";
	}

	/**
     * 
     * Método que recupera los usuarios de la base de datos
     * atacando directamente vía JDBC y lo deriva a la plantilla correspondiente
     * 
     * El código es mucho más grande y sujeto a errores, al no beneficiarnos de las funciionalidades
     * ORM de SPRING
     * 
     * Tampoco usa las funcionalidades de mapeo de tuplas a Objetos (RowMapper)
     */
	@GetMapping("/usersJdbc")
	public String usersJdbc(Model model) {
		
		List<User> retrievedUsers = new ArrayList<User>();
		User user;
		PreparedStatement pstmt;
		
		try {
			pstmt = dataSource.getConnection().prepareStatement("select * from user");
			ResultSet rs = pstmt.executeQuery();
			
			while(rs.next()) {
			    String name = rs.getString("name");
			    logger.info("name:" + name);
			    int id = rs.getInt("id");
			    String email = rs.getString("email");
			    
			    user = new User(id,name,email);
			    retrievedUsers.add(user);
			}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		model.addAttribute("users", retrievedUsers);
		logger.info("Retrieving " + retrievedUsers.size() + " users using JDBC");
		return "user/users";
		
	}

	@GetMapping("/user")
	public String greetingForm(Model model) {
		model.addAttribute("user", new User());
		return "user/user";
	}

	@PostMapping("/user")
	public String userSubmit(@ModelAttribute User user, Model model) {
		userRepository.save(user);
		logger.info("Storing new user: " + user);
		model.addAttribute("user", user);
		return "user/userResult";
	}
	
	@GetMapping("/responsibleUsers")
	public String responsibleUsers(Model model) {
		/*
		 * Rellenar código para recuperar los usuarios responsables
		 * de áreas
		 */
		
		
		return "user/users";
		
	}

}